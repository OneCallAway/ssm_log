<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 引入配置文件 -->
    <properties resource="jdbc.properties"/>

    <!-- 指定数据连接驱动jar地址 -->
    <classPathEntry location="${classPath}"/>

    <!-- 一个数据库一个context -->
    <context id="default">
        <!-- 抑制警告 -->
        <property name="suppressTypeWarnings" value="true"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!--
            自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
            一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
        -->
        <property name="autoDelimitKeywords" value="false"/>
        <!--
            beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，
            比如ORACLE就是双引号，MYSQL默认是`反引号；
        -->
        <!--<property name="beginningDelimiter" value="`"/>-->
        <!--<property name="endingDelimiter" value="`"/>-->

        <plugin type="com.zxk175.mbg.plugin.SerializablePlugin"/>

        <!-- generate entity时，生成serialVersionUID -->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->
        <!-- 增加字符串字段映射到一个jdbc字符的方法 -->
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin"/>
        <!-- genenat entity时,生成toString -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 生成一个新的selectByExample方法，这个方法可以接受一个RowBounds参数，主要用来实现分页 -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>
        <!-- generate entity时，生成hashcode和equals方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />-->
        <!-- 一个例子，比如要xxxExample改成xxxCriteria，只需要配置：-->
        <!--<plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">-->
        <!--<property name="searchString" value="Example$"/>-->
        <!--<property name="replaceString" value="Criteria"/>-->
        <!--</plugin>-->

        <!-- 注释 -->
        <!--<commentGenerator>-->
        <!--&lt;!&ndash; 是否取消注释 false打开，true关闭 &ndash;&gt;-->
        <!--<property name="suppressAllComments" value="true"/>-->
        <!--&lt;!&ndash; 是否生成注释代码时间戳 false打开，true关闭 &ndash;&gt;-->
        <!--<property name="suppressDate" value="true"/>-->
        <!--</commentGenerator>-->

        <!-- 自定义注释 -->
        <commentGenerator type="com.zxk175.mbg.plugin.MyCommentGeneratorPlugin"/>

        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}" userId="${jdbc.username}" password="${jdbc.password}">
            <!-- 获取表字段注释 针对oracle数据库 -->
            <!--<property name="remarksReporting" value="true"/>-->
            <!-- 获取表字段注释 针对mysql数据库 -->
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <!-- 类型转换 -->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--
            Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="com.zxk175.ssm_log.pojo"
                            targetProject="${project_java}">
            <!-- 给Model添加一个父类 -->
            <!--<property name="rootClass" value="com.zxk175.ssm_log.pojo.BasePojo"/>-->

            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.zxk175.ssm_log.pojo， true:com.zxk175.ssm_log.pojo.[schemaName] -->
            <property name="enableSubPackages" value="true"/>

            <!-- 生成代码字段名默认按驼峰命名 -->
            <property name="useActualColumnNames" value="false"/>

            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>

            <!-- 是否针对string类型的字段在set的时候进行trim调用 -->
            <property name="trimStrings" value="true"/>

            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成mapxml文件 -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="${project_res}">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.zxk175.ssm_log.dao， true:com.zxk175.ssm_log.dao.[schemaName] -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--
            客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
            type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <!-- 生成mapxml对应client，也就是接口dao -->
        <javaClientGenerator targetPackage="com.zxk175.ssm_log.dao"
                             targetProject="${project_java}" type="ANNOTATEDMAPPER">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.zxk175.ssm_log.dao， true:com.zxk175.ssm_log.dao.[schemaName] -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 配置表信息 -->
        <!--<table schema="${schema}" tableName="t_user"-->
        <!--domainObjectName="User" enableCountByExample="false"-->
        <!--enableDeleteByExample="false" enableSelectByExample="false"-->
        <!--enableUpdateByExample="false">-->
        <table schema="${schemaName}" tableName="t_user"
               domainObjectName="User" enableCountByExample="true"
               enableDeleteByExample="true" enableSelectByExample="true"
               enableUpdateByExample="true">
            <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 是否生成 example类   -->

            <!-- 列的命名规则：MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名
                   作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤 支持正则表达式
                   searchString 表示要被换掉的字符串
                   replaceString 则是要换成的字符串，默认情况下为空字符串，可选 -->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->

            <!-- 告诉 MBG 忽略某一列
                    column，需要忽略的列
                    delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配
                    是否限定表的列名，即固定表列在Model中的名称 -->
            <!--<ignoreColumn column="name"  delimitedColumnName="true" />-->

            <!--   column 数据库中字段名
                   property POJO属性名
                   javaType POJO类型
                   jdbcType 数据库字段类型 -->
            <!-- 指定列的java数据类型 -->
            <!--<columnOverride column="used" jdbcType="TINYINT" property="used" javaType="java.lang.Short"/>-->
        </table>
    </context>
</generatorConfiguration>